name: Ads — Bootstrap Search Campaign

on:
  workflow_dispatch:
    inputs:
      campaign_name:
        description: "Campaign name"
        required: true
        default: "TitanCraft Bootstrap Search"
      daily_budget:
        description: "Daily budget (USD)"
        required: true
        default: "30"

permissions:
  contents: read

jobs:
  bootstrap:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Google Ads SDK
        run: |
          python -m pip install --upgrade pip
          pip install google-ads==24.1.0

      # --- Create (paused) Search campaign with a budget, ad group, RSA ad, and starter keywords
      - name: Create Search campaign
        env:
          # Fallbacks let you keep either GADS_* or GOOGLE_ADS_* secret names.
          GADS_DEVELOPER_TOKEN:   ${{ secrets.GADS_DEVELOPER_TOKEN   || secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}
          GADS_CLIENT_ID:         ${{ secrets.GADS_CLIENT_ID         || secrets.GOOGLE_ADS_CLIENT_ID }}
          GADS_CLIENT_SECRET:     ${{ secrets.GADS_CLIENT_SECRET     || secrets.GOOGLE_ADS_CLIENT_SECRET }}
          GADS_REFRESH_TOKEN:     ${{ secrets.GADS_REFRESH_TOKEN     || secrets.GOOGLE_ADS_REFRESH_TOKEN }}
          GADS_LOGIN_CUSTOMER_ID: ${{ secrets.GADS_LOGIN_CUSTOMER_ID || secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}
          GADS_CUSTOMER_ID:       ${{ secrets.GADS_CUSTOMER_ID       || secrets.GOOGLE_ADS_CUSTOMER_ID }}
          DAILY_BUDGET:           ${{ github.event.inputs.daily_budget }}
          CAMPAIGN_NAME:          ${{ github.event.inputs.campaign_name }}
        run: |
          python - <<'PY'
          import os, uuid, sys
          from google.ads.googleads.client import GoogleAdsClient
          from google.ads.googleads.errors import GoogleAdsException

          def usd_to_micros(d):
              return int(round(float(d) * 1_000_000))

          # ---- Config from env
          config = {
              "developer_token": os.environ["GADS_DEVELOPER_TOKEN"],
              "login_customer_id": os.environ.get("GADS_LOGIN_CUSTOMER_ID"),
              "use_proto_plus": True,
              "oauth2": {
                  "client_id": os.environ["GADS_CLIENT_ID"],
                  "client_secret": os.environ["GADS_CLIENT_SECRET"],
                  "refresh_token": os.environ["GADS_REFRESH_TOKEN"],
              },
          }
          customer_id = os.environ["GADS_CUSTOMER_ID"].replace("-", "")
          campaign_name = os.environ.get("CAMPAIGN_NAME") or f"Bootstrap Search {uuid.uuid4().hex[:6]}"
          daily_budget_micros = usd_to_micros(os.environ.get("DAILY_BUDGET", "30"))

          client = GoogleAdsClient.load_from_dict(config)

          try:
              # ---- Budget
              budget_svc = client.get_service("CampaignBudgetService")
              budget = client.get_type("CampaignBudget")
              budget.name = f"{campaign_name} Budget"
              budget.amount_micros = daily_budget_micros
              budget.delivery_method = client.enums.BudgetDeliveryMethodEnum.STANDARD
              budget.explicitly_shared = False

              budget_op = client.get_type("CampaignBudgetOperation")
              budget_op.create.CopyFrom(budget)
              budget_res = budget_svc.mutate_campaign_budgets(
                  customer_id=customer_id, operations=[budget_op]
              )
              budget_resource = budget_res.results[0].resource_name
              print("Created budget:", budget_resource, flush=True)

              # ---- Campaign (start PAUSED for safety)
              campaign_svc = client.get_service("CampaignService")
              campaign = client.get_type("Campaign")
              campaign.name = campaign_name
              campaign.advertising_channel_type = client.enums.AdvertisingChannelTypeEnum.SEARCH
              campaign.status = client.enums.CampaignStatusEnum.PAUSED
              campaign.campaign_budget = budget_resource
              campaign.manual_cpc.CopyFrom(client.get_type("ManualCpc")())

              campaign_op = client.get_type("CampaignOperation")
              campaign_op.create.CopyFrom(campaign)
              campaign_res = campaign_svc.mutate_campaigns(
                  customer_id=customer_id, operations=[campaign_op]
              )
              campaign_resource = campaign_res.results[0].resource_name
              print("Created campaign:", campaign_resource, flush=True)

              # ---- Ad group
              adgroup_svc = client.get_service("AdGroupService")
              ad_group = client.get_type("AdGroup")
              ad_group.name = f"{campaign_name} Ad Group 1"
              ad_group.campaign = campaign_resource
              ad_group.status = client.enums.AdGroupStatusEnum.ENABLED
              ad_group.type_ = client.enums.AdGroupTypeEnum.SEARCH_STANDARD
              ad_group.cpc_bid_micros = int(1.50 * 1_000_000)

              ag_op = client.get_type("AdGroupOperation")
              ag_op.create.CopyFrom(ad_group)
              ag_res = adgroup_svc.mutate_ad_groups(customer_id=customer_id, operations=[ag_op])
              ad_group_resource = ag_res.results[0].resource_name
              print("Created ad group:", ad_group_resource, flush=True)

              # ---- Responsive Search Ad (attach via AdGroupAd)
              adgroup_ad_svc = client.get_service("AdGroupAdService")
              ad_group_ad = client.get_type("AdGroupAd")
              ad_group_ad.ad_group = ad_group_resource
              ad_group_ad.status = client.enums.AdGroupAdStatusEnum.PAUSED  # review first

              ad = ad_group_ad.ad
              rsa = ad.responsive_search_ad
              rsa.headlines.extend([
                  client.get_type("AdTextAsset")(text="TitanCraft AI"),
                  client.get_type("AdTextAsset")(text="Beat ChatGPT with Specialists"),
                  client.get_type("AdTextAsset")(text="Stronger Answers, Less Effort"),
              ])
              rsa.descriptions.extend([
                  client.get_type("AdTextAsset")(text="Auto-route prompts to the best expert models."),
                  client.get_type("AdTextAsset")(text="Founding beta from $29/mo."),
              ])
              ad.final_urls.append("https://titancraft.io/")

              aga_op = client.get_type("AdGroupAdOperation")
              aga_op.create.CopyFrom(ad_group_ad)
              aga_res = adgroup_ad_svc.mutate_ad_group_ads(
                  customer_id=customer_id, operations=[aga_op]
              )
              print("Created RSA:", aga_res.results[0].resource_name, flush=True)

              # ---- Starter keywords
              criterion_svc = client.get_service("AdGroupCriterionService")
              def kw(text, match):
                  c = client.get_type("AdGroupCriterion")
                  c.ad_group = ad_group_resource
                  c.status = client.enums.AdGroupCriterionStatusEnum.ENABLED
                  c.keyword.text = text
                  c.keyword.match_type = match
                  return c

              ops = []
              for text, match in [
                  ("ai assistant", client.enums.KeywordMatchTypeEnum.PHRASE),
                  ("best chatgpt alternative", client.enums.KeywordMatchTypeEnum.BROAD),
              ]:
                  op = client.get_type("AdGroupCriterionOperation")
                  op.create.CopyFrom(kw(text, match))
                  ops.append(op)

              criterion_svc.mutate_ad_group_criteria(customer_id=customer_id, operations=ops)
              print("Added starter keywords.", flush=True)

              print("Bootstrap complete — campaign is PAUSED. Review & enable in Google Ads.", flush=True)

          except GoogleAdsException as ex:
              for e in ex.failure.errors:
                  print(f"[GoogleAdsError] {e.error_code} — {e.message}")
              sys.exit(1)
          except Exception as ex:
              print("Unexpected error:", ex)
              sys.exit(1)
          PY

