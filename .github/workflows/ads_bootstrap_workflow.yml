name: Ads — Bootstrap Search Campaign

on:
  workflow_dispatch:
    inputs:
      daily_budget:
        description: Daily budget in USD
        default: "30"
        required: true
      campaign_name:
        description: Campaign name
        default: "TitanCraft – Search — Bootstrapped"
        required: true

permissions:
  contents: read

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Google Ads SDK (force fresh)
        run: |
          set -euxo pipefail
          python -V
          python -m pip install --upgrade pip
          # Force a fresh, current stack to avoid sunset API versions
          python -m pip install --upgrade --force-reinstall google-ads grpcio protobuf

      - name: Show SDK version
        run: |
          python - <<'PY'
          import sys
          import google.ads.googleads as ga
          from google.ads.googleads.client import GoogleAdsClient
          print("python:", sys.version)
          print("google-ads version:", getattr(ga, "__version__", "unknown"))
          print("DEFAULT API version:", getattr(GoogleAdsClient, "_DEFAULT_VERSION", "n/a"))
          PY

      - name: Debug secrets presence (safe)
        run: |
          mask() { echo "$1" | sed -E 's/./*/g'; }
          echo "GADS_DEVELOPER_TOKEN=$(mask "${{ secrets.GADS_DEVELOPER_TOKEN }}")"
          echo "GADS_CLIENT_ID=$(mask "${{ secrets.GADS_CLIENT_ID }}")"
          echo "GADS_CLIENT_SECRET=$(mask "${{ secrets.GADS_CLIENT_SECRET }}")"
          echo "GADS_REFRESH_TOKEN=$(mask "${{ secrets.GADS_REFRESH_TOKEN }}")"
          echo "GADS_LOGIN_CUSTOMER_ID=$(mask "${{ secrets.GADS_LOGIN_CUSTOMER_ID }}")"
          echo "GADS_CUSTOMER_ID=$(mask "${{ secrets.GADS_CUSTOMER_ID }}")"

      - name: Auth smoke test (no account changes)
        env:
          GADS_DEVELOPER_TOKEN: ${{ secrets.GADS_DEVELOPER_TOKEN }}
          GADS_CLIENT_ID: ${{ secrets.GADS_CLIENT_ID }}
          GADS_CLIENT_SECRET: ${{ secrets.GADS_CLIENT_SECRET }}
          GADS_REFRESH_TOKEN: ${{ secrets.GADS_REFRESH_TOKEN }}
          GADS_LOGIN_CUSTOMER_ID: ${{ secrets.GADS_LOGIN_CUSTOMER_ID }}
          GADS_CUSTOMER_ID: ${{ secrets.GADS_CUSTOMER_ID }}
        run: |
          python - <<'PY'
          import os
          from google.ads.googleads.client import GoogleAdsClient
          from google.ads.googleads.errors import GoogleAdsException

          cfg = {
            "developer_token": os.environ["GADS_DEVELOPER_TOKEN"],
            "client_id": os.environ["GADS_CLIENT_ID"],
            "client_secret": os.environ["GADS_CLIENT_SECRET"],
            "refresh_token": os.environ["GADS_REFRESH_TOKEN"],
            "login_customer_id": os.environ["GADS_LOGIN_CUSTOMER_ID"],
            "use_proto_plus": True,
          }

          client = GoogleAdsClient.load_from_dict(cfg)
          ga_service = client.get_service("GoogleAdsService")
          query = "SELECT customer.id, customer.descriptive_name FROM customer LIMIT 1"

          try:
            resp = ga_service.search(customer_id=os.environ["GADS_CUSTOMER_ID"], query=query)
            for r in resp:
              print(f"Auth OK for customer {r.customer.id} ({r.customer.descriptive_name})")
          except GoogleAdsException as ex:
            print("== GoogleAdsException ==")
            for err in ex.failure.errors:
              code = err.error_code
              path = " > ".join([e.field_name for e in err.location.field_path_elements]) if err.location else ""
              print(f"code={code} | message={err.message} | field={path}")
            raise
          PY
