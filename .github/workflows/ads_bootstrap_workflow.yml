name: Ads â€” Bootstrap Search Campaign

on:
  workflow_dispatch:
    inputs:
      daily_budget:
        description: "Daily budget in USD"
        required: true
        default: "25"
      campaign_name:
        description: "Campaign name"
        required: false
        default: "Founding Beta Search"

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Google Ads SDK
        run: |
          python -m pip install --upgrade pip
          pip install google-ads==24.1.0

      - name: Create Search campaign
        env:
          GADS_DEVELOPER_TOKEN: ${{ secrets.GADS_DEVELOPER_TOKEN }}
          GADS_CLIENT_ID: ${{ secrets.GADS_CLIENT_ID }}
          GADS_CLIENT_SECRET: ${{ secrets.GADS_CLIENT_SECRET }}
          GADS_REFRESH_TOKEN: ${{ secrets.GADS_REFRESH_TOKEN }}
          GADS_LOGIN_CUSTOMER_ID: ${{ secrets.GADS_LOGIN_CUSTOMER_ID }}
          GADS_CUSTOMER_ID: ${{ secrets.GADS_CUSTOMER_ID }}
          DAILY_BUDGET: ${{ github.event.inputs.daily_budget }}
          CAMPAIGN_NAME: ${{ github.event.inputs.campaign_name }}
        run: |
          python - <<'PY'
          import os, uuid, sys
          from google.ads.googleads.client import GoogleAdsClient
          from google.ads.googleads.errors import GoogleAdsException

          def usd_to_micros(d):
              return int(float(d) * 1_000_000)

          config = {
              "developer_token": os.environ["GADS_DEVELOPER_TOKEN"],
              "login_customer_id": os.environ["GADS_LOGIN_CUSTOMER_ID"],
              "use_proto_plus": True,
              "oauth2": {
                  "client_id": os.environ["GADS_CLIENT_ID"],
                  "client_secret": os.environ["GADS_CLIENT_SECRET"],
                  "refresh_token": os.environ["GADS_REFRESH_TOKEN"],
              },
          }
          customer_id = os.environ["GADS_CUSTOMER_ID"]
          daily_budget = usd_to_micros(os.environ.get("DAILY_BUDGET","25"))
          campaign_name = os.environ.get("CAMPAIGN_NAME") or f"Founding Beta Search {uuid.uuid4().hex[:6]}"

          client = GoogleAdsClient.load_from_dict(config)

          try:
              # 1) Create budget
              budget_service = client.get_service("CampaignBudgetService")
              budget_op = client.get_type("CampaignBudgetOperation")
              budget = budget_op.create
              budget.name = f"{campaign_name} Budget {uuid.uuid4().hex[:4]}"
              budget.amount_micros = daily_budget
              budget.explicitly_shared = False
              budget_resp = budget_service.mutate_campaign_budgets(customer_id=customer_id, operations=[budget_op])
              budget_rn = budget_resp.results[0].resource_name
              print("Budget:", budget_rn)

              # 2) Create campaign (SEARCH, paused)
              campaign_service = client.get_service("CampaignService")
              campaign_op = client.get_type("CampaignOperation")
              campaign = campaign_op.create
              campaign.name = campaign_name
              campaign.advertising_channel_type = client.enums.AdvertisingChannelTypeEnum.SEARCH
              campaign.status = client.enums.CampaignStatusEnum.PAUSED
              campaign.campaign_budget = budget_rn

              # Bidding: Manual CPC (simple & stable)
              campaign.manual_cpc.CopyFrom(client.get_type("ManualCpc")())

              # Networks: Search only
              campaign.network_settings.target_google_search = True
              campaign.network_settings.target_search_network = True
              campaign.network_settings.target_content_network = False
              campaign.network_settings.target_partner_search_network = False

              camp_resp = campaign_service.mutate_campaigns(customer_id=customer_id, operations=[campaign_op])
              campaign_rn = camp_resp.results[0].resource_name
              print("Campaign:", campaign_rn)

              # 3) Targeting: US + English
              criterion_service = client.get_service("CampaignCriterionService")
              ops = []

              us_op = client.get_type("CampaignCriterionOperation")
              us = us_op.create
              us.campaign = campaign_rn
              us.location.geo_target_constant = client.get_service("GeoTargetConstantService").geo_target_constant_path("2840")
              ops.append(us_op)

              en_op = client.get_type("CampaignCriterionOperation")
              en = en_op.create
              en.campaign = campaign_rn
              en.language.language_constant = client.get_service("LanguageConstantService").language_constant_path("1000")
              ops.append(en_op)

              criterion_service.mutate_campaign_criteria(customer_id=customer_id, operations=ops)
              print("Added US + English criteria")

              # 4) Ad group
              ag_service = client.get_service("AdGroupService")
              ag_op = client.get_type("AdGroupOperation")
              ag = ag_op.create
              ag.name = f"{campaign_name} AdGroup 1"
              ag.campaign = campaign_rn
              ag.status = client.enums.AdGroupStatusEnum.ENABLED
              ag.type_ = client.enums.AdGroupTypeEnum.SEARCH_STANDARD
              ag.cpc_bid_micros = 2_000_000  # $2.00 initial bid
              ag_resp = ag_service.mutate_ad_groups(customer_id=customer_id, operations=[ag_op])
              ad_group_rn = ag_resp.results[0].resource_name
              print("AdGroup:", ad_group_rn)

              # 5) Keywords (exact match)
              agc_service = client.get_service("AdGroupCriterionService")
              kw_terms = [
                  "ai model router",
                  "best ai model routing",
                  "route prompts to best model",
                  "multi model ai answers",
              ]
              kw_ops = []
              for term in kw_terms:
                  op = client.get_type("AdGroupCriterionOperation")
                  c = op.create
                  c.ad_group = ad_group_rn
                  c.status = client.enums.AdGroupCriterionStatusEnum.ENABLED
                  c.keyword.text = term
                  c.keyword.match_type = client.enums.KeywordMatchTypeEnum.EXACT
                  kw_ops.append(op)
              agc_service.mutate_ad_group_criteria(customer_id=customer_id, operations=kw_ops)
              print("Added keywords")

              # 6) Responsive Search Ad (paused)
              ad_service = client.get_service("AdGroupAdService")
              ad_op = client.get_type("AdGroupAdOperation")
              aga = ad_op.create
              aga.ad_group = ad_group_rn
              aga.status = client.enums.AdGroupAdStatusEnum.PAUSED
              rsa = aga.ad.responsive_search_ad
              for h in [
                  "Smarter answers for each task",
                  "Routes to the best AI model",
                  "Founding Beta $29/mo",
              ]:
                  asset = client.get_type("AdTextAsset")
                  asset.text = h
                  rsa.headlines.append(asset)
              for d in [
                  "TitanCraft auto-routes prompts to the model that wins for the job.",
                  "Concierge onboarding for early users. Cancel anytime.",
              ]:
                  asset = client.get_type("AdTextAsset")
                  asset.text = d
                  rsa.descriptions.append(asset)
              aga.ad.final_urls.append("https://titancraft.io/founding-beta/")

              ad_service.mutate_ad_group_ads(customer_id=customer_id, operations=[ad_op])
              print("Created RSA.")

              print("\nSUCCESS: Campaign created in PAUSED state. Enable it in Google Ads when ready.")

          except GoogleAdsException as ex:
              print("Request failed with GoogleAdsException:")
              for error in ex.failure.errors:
                  print(f"  {error.error_code}: {error.message}")
              sys.exit(1)
          PY
