name: Ads — Bootstrap Search Campaign

on:
  workflow_dispatch:
    inputs:
      daily_budget:
        description: "Daily budget in USD"
        default: "30"
        required: true
      campaign_name:
        description: "Campaign name"
        default: "TitanCraft – Search – Bootstrapped"
        required: true

permissions:
  contents: read

jobs:
  bootstrap:
    runs-on: ubuntu-latest

    # Make secrets available to ALL steps in this job
    env:
      GADS_DEVELOPER_TOKEN: ${{ secrets.GADS_DEVELOPER_TOKEN || secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}
      GADS_CLIENT_ID:       ${{ secrets.GADS_CLIENT_ID       || secrets.GOOGLE_ADS_CLIENT_ID }}
      GADS_CLIENT_SECRET:   ${{ secrets.GADS_CLIENT_SECRET   || secrets.GOOGLE_ADS_CLIENT_SECRET }}
      GADS_REFRESH_TOKEN:   ${{ secrets.GADS_REFRESH_TOKEN   || secrets.GOOGLE_ADS_REFRESH_TOKEN }}
      GADS_LOGIN_CUSTOMER_ID: ${{ secrets.GADS_LOGIN_CUSTOMER_ID || secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}
      GADS_CUSTOMER_ID:       ${{ secrets.GADS_CUSTOMER_ID       || secrets.GOOGLE_ADS_CUSTOMER_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Google Ads SDK
        run: |
          python -m pip install --upgrade pip
          pip install google-ads==24.1.0

      - name: Debug secrets presence (safe)
        shell: bash
        run: |
          set -euo pipefail
          for k in GADS_DEVELOPER_TOKEN GADS_CLIENT_ID GADS_CLIENT_SECRET GADS_REFRESH_TOKEN GADS_LOGIN_CUSTOMER_ID GADS_CUSTOMER_ID; do
            if [ -z "${!k:-}" ]; then
              echo "::error::$k is MISSING"
            else
              echo "$k=***"
            fi
          done

      - name: Create Search campaign (auth smoke test)
        run: |
          python - <<'PY'
          import os, sys, uuid
          from google.ads.googleads.client import GoogleAdsClient
          from google.ads.googleads.errors import GoogleAdsException

          required = [
            "GADS_DEVELOPER_TOKEN","GADS_CLIENT_ID","GADS_CLIENT_SECRET",
            "GADS_REFRESH_TOKEN","GADS_LOGIN_CUSTOMER_ID","GADS_CUSTOMER_ID"
          ]
          missing = [k for k in required if not os.environ.get(k)]
          if missing:
            print("MISSING_ENV=" + ",".join(missing))
            sys.exit(2)

          # Flat config (works with current google-ads SDK)
          config = {
            "developer_token":   os.environ["GADS_DEVELOPER_TOKEN"],
            "login_customer_id": os.environ["GADS_LOGIN_CUSTOMER_ID"],
            "client_id":         os.environ["GADS_CLIENT_ID"],
            "client_secret":     os.environ["GADS_CLIENT_SECRET"],
            "refresh_token":     os.environ["GADS_REFRESH_TOKEN"],
            "use_proto_plus": True,
          }

          client = GoogleAdsClient.load_from_dict(config)

          # Minimal auth check first (keeps failures clear)
          customer_id = os.environ["GADS_CUSTOMER_ID"]
          ga_service = client.get_service("GoogleAdsService")
          q = "SELECT customer.descriptive_name FROM customer LIMIT 1"
          rows = ga_service.search(customer_id=customer_id, query=q)
          name = next(iter(rows)).customer.descriptive_name
          print(f"AUTH_OK for account: {name}")

          # ---- (You can add create budget/campaign code below once auth passes) ----
          PY
