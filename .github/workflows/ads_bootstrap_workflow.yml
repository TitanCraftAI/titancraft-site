name: Ads â€” Bootstrap Search Campaign

on:
  workflow_dispatch:
    inputs:
      daily_budget:
        description: "Daily budget in USD"
        default: "30"
        required: true
      campaign_name:
        description: "Campaign name"
        default: "TitanCraft - Search - Bootstrapped"
        required: true

permissions:
  contents: read

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Google Ads SDK
        run: |
          python -m pip install --upgrade pip
          pip install google-ads==24.1.0

      - name: Create Search campaign
        shell: bash
        env:
          # Accept either secret prefix
          GADS_DEVELOPER_TOKEN:      ${{ secrets.GADS_DEVELOPER_TOKEN      || secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}
          GADS_CLIENT_ID:            ${{ secrets.GADS_CLIENT_ID            || secrets.GOOGLE_ADS_CLIENT_ID }}
          GADS_CLIENT_SECRET:        ${{ secrets.GADS_CLIENT_SECRET        || secrets.GOOGLE_ADS_CLIENT_SECRET }}
          GADS_REFRESH_TOKEN:        ${{ secrets.GADS_REFRESH_TOKEN        || secrets.GOOGLE_ADS_REFRESH_TOKEN }}
          GADS_LOGIN_CUSTOMER_ID:    ${{ secrets.GADS_LOGIN_CUSTOMER_ID    || secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}
          GADS_CUSTOMER_ID:          ${{ secrets.GADS_CUSTOMER_ID          || secrets.GOOGLE_ADS_CUSTOMER_ID }}
          DAILY_BUDGET:              ${{ github.event.inputs.daily_budget }}
          CAMPAIGN_NAME:             ${{ github.event.inputs.campaign_name }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, uuid, sys
          from google.ads.googleads.client import GoogleAdsClient
          from google.ads.googleads.errors import GoogleAdsException

          def usd_to_micros(d):
              return int(round(float(d) * 1_000_000))

          cfg = {
              "developer_token": os.environ["GADS_DEVELOPER_TOKEN"],
              "login_customer_id": os.environ["GADS_LOGIN_CUSTOMER_ID"],
              "use_proto_plus": True,
              "oauth2": {
                  "client_id": os.environ["GADS_CLIENT_ID"],
                  "client_secret": os.environ["GADS_CLIENT_SECRET"],
                  "refresh_token": os.environ["GADS_REFRESH_TOKEN"],
              },
          }

          client = GoogleAdsClient.load_from_dict(cfg)
          customer_id = os.environ["GADS_CUSTOMER_ID"].replace("-", "")
          budget_micros = usd_to_micros(os.environ.get("DAILY_BUDGET") or "30")
          campaign_name = os.environ.get("CAMPAIGN_NAME") or f"Bootstrapped Search {uuid.uuid4().hex[:6]}"

          try:
              # Create a budget
              budget_svc = client.get_service("CampaignBudgetService")
              bud_op = client.get_type("CampaignBudgetOperation")
              budget = bud_op.create
              budget.name = f"{campaign_name} Budget {uuid.uuid4().hex[:4]}"
              budget.amount_micros = budget_micros
              budget.explicitly_shared = False
              budget_resource = budget_svc.mutate_campaign_budgets(
                  customer_id=customer_id, operations=[bud_op]
              ).results[0].resource_name

              # Create a paused Search campaign
              camp_svc = client.get_service("CampaignService")
              op = client.get_type("CampaignOperation")
              camp = op.create
              camp.name = campaign_name
              camp.advertising_channel_type = client.enums.AdvertisingChannelTypeEnum.SEARCH
              camp.status = client.enums.CampaignStatusEnum.PAUSED
              camp.manual_cpc.CopyFrom(client.get_type("ManualCpc")())
              camp.campaign_budget = budget_resource
              camp.network_settings.target_google_search = True
              camp.network_settings.target_search_network = True

              result = camp_svc.mutate_campaigns(customer_id=customer_id, operations=[op]).results[0]
              print(f"Created campaign: {result.resource_name}")

          except GoogleAdsException as ex:
              print("Google Ads API error:")
              for e in ex.failure.errors:
                  print(f" - {e.err
