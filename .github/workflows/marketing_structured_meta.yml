name: Marketing — JSON-LD + Social Cards

on:
  workflow_dispatch:
  schedule:
    - cron: "17 9 * * 1,3,5"  # Mon/Wed/Fri 09:17 UTC

permissions:
  contents: write

jobs:
  meta:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Ensure OG image
        run: |
          set -e
          mkdir -p public
          if [ ! -f public/og-default.png ]; then
            python - <<'PY'
import os
from PIL import Image, ImageDraw, ImageFont

W, H = 1200, 630
img = Image.new("RGB", (W, H), (16, 18, 24))
d = ImageDraw.Draw(img)

title = "TitanCraft — Founding Beta"
subtitle = "$29/mo · Early Access"

# fallback font
try:
    font_bold = ImageFont.truetype("DejaVuSans-Bold.ttf", 72)
    font_regular = ImageFont.truetype("DejaVuSans.ttf", 46)
except:
    font_bold = ImageFont.load_default()
    font_regular = ImageFont.load_default()

tw = d.textlength(title, font=font_bold)
d.text(((W-tw)/2, 210), title, fill=(245,245,245), font=font_bold)
sw = d.textlength(subtitle, font=font_regular)
d.text(((W-sw)/2, 320), subtitle, fill=(180,180,180), font=font_regular)

img.save("public/og-default.png", "PNG")
PY
          fi

      - name: Inject JSON-LD + OG/Twitter
        run: |
          set -e
          python - <<'PY'
import os, re, json, datetime

BASE_URL = "https://titancraft.io"
SITE_NAME = "TitanCraft"
ORG_NAME  = "TitanCraft AI, LLC"
LOGO_URL  = f"{BASE_URL}/favicon.png"         # adjust if you have a dedicated logo file
OG_IMAGE  = f"{BASE_URL}/public/og-default.png"

PAGES = [
  ("index.html",
   f"{SITE_NAME} — AI that routes to the best model for your task",
   "Beat ChatGPT by routing to the best specialist models. Stronger answers, less effort.",
   f"{BASE_URL}/"),
  ("founding-beta/index.html",
   "Founding Beta Access",
   "Join the Founding Beta for $29/mo and get early features and concierge onboarding.",
   f"{BASE_URL}/founding-beta/"),
  ("founding-beta/success.html",
   "You're in! Founding Beta confirmed",
   "Welcome to TitanCraft Founding Beta — we’ll email next steps shortly.",
   f"{BASE_URL}/founding-beta/success.html"),
]

def read(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def write(path, content):
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

def ensure_block(head_html, start, end, new_block):
    # remove existing block between markers, then insert a fresh one
    pattern = re.compile(
        re.escape(start) + r".*?" + re.escape(end),
        flags=re.DOTALL | re.IGNORECASE,
    )
    head_html = re.sub(pattern, "", head_html)
    return head_html + "\n" + start + "\n" + new_block.strip() + "\n" + end + "\n"

def upsert_into_head(html, fragment):
    m = re.search(r"<head[^>]*>", html, flags=re.IGNORECASE)
    if not m:
        return html  # no <head>, bail
    insert_at = m.end()
    return html[:insert_at] + "\n" + fragment.strip() + "\n" + html[insert_at:]

# Global JSON-LD blocks for the site (insert into index.html only)
org_jsonld = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": ORG_NAME,
  "url": BASE_URL,
  "logo": LOGO_URL,
  "sameAs": [
    "https://x.com/TitanCraftAI"
  ]
}
website_jsonld = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": SITE_NAME,
  "url": BASE_URL,
  "potentialAction": {
    "@type": "SearchAction",
    "target": f"{BASE_URL}/?q={{search_term_string}}",
    "query-input": "required name=search_term_string"
  }
}
product_jsonld = {
  "@context": "https://schema.org",
  "@type": "Product",
  "name": "Founding Beta Access",
  "description": "Early supporters get TitanCraft for $29/mo during beta with concierge onboarding.",
  "brand": SITE_NAME,
  "offers": {
    "@type": "Offer",
    "price": "29.00",
    "priceCurrency": "USD",
    "availability": "https://schema.org/InStock",
    "url": f"{BASE_URL}/founding-beta/"
  }
}

JSONLD_MARK_START = "<!-- START:jsonld -->"
JSONLD_MARK_END   = "<!-- END:jsonld -->"
SOCIAL_MARK_START = "<!-- START:meta-social -->"
SOCIAL_MARK_END   = "<!-- END:meta-social -->"

changed = False

for rel, title, desc, url in PAGES:
    if not os.path.exists(rel):
        continue
    html = read(rel)

    # Build social meta
    social_tags = f"""
<meta property="og:title" content="{title}">
<meta property="og:description" content="{desc}">
<meta property="og:type" content="website">
<meta property="og:url" content="{url}">
<meta property="og:site_name" content="{SITE_NAME}">
<meta property="og:image" content="{OG_IMAGE}">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:title" content="{title}">
<meta name="twitter:description" content="{desc}">
<meta name="twitter:image" content="{OG_IMAGE}">
    """.strip()

    # If index.html, include global JSON-LD + product
    jsonlds = []
    if rel == "index.html":
        jsonlds = [org_jsonld, website_jsonld, product_jsonld]
    elif rel.endswith("founding-beta/index.html"):
        jsonlds = [product_jsonld]

    jsonld_block = "\n".join(
        f'<script type="application/ld+json">{json.dumps(j, ensure_ascii=False)}</script>'
        for j in jsonlds
    )

    # ensure markers
    head_insert = ""
    if jsonlds:
        head_insert = JSONLD_MARK_START + "\n" + jsonld_block + "\n" + JSONLD_MARK_END

    social_insert = SOCIAL_MARK_START + "\n" + social_tags + "\n" + SOCIAL_MARK_END

    # First remove old blocks if present and re-add updated blocks
    # If blocks not present yet, just insert after <head>
    if JSONLD_MARK_START in html or SOCIAL_MARK_START in html:
        head = re.search(r"(<head[^>]*>)(.*?)(</head>)", html, flags=re.DOTALL|re.IGNORECASE)
        if head:
            before, mid, after = html[:head.start(2)], html[head.start(2):head.end(2)], html[head.end(2):]
            mid = ensure_block(mid, SOCIAL_MARK_START, SOCIAL_MARK_END, social_tags)
            if head_insert:
                mid = ensure_block(mid, JSONLD_MARK_START, JSONLD_MARK_END, jsonld_block)
            html_new = before + mid + after
        else:
            html_new = html
    else:
        # No markers yet — insert fresh blocks after <head>
        combined = "\n".join([x for x in [head_insert, social_insert] if x])
        html_new = upsert_into_head(html, combined)

    if html_new != html:
        write(rel, html_new)
        changed = True

if changed:
    print("Updated meta/JSON-LD in pages")
else:
    print("No changes needed")
PY

      - name: Commit & push
        run: |
          set -e
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "titan-bot"
            git config user.email "bot@titancraft.io"
            git add -A
            git commit -m "chore(marketing): update JSON-LD + OpenGraph/Twitter tags"
            # avoid push conflicts when main advanced
            git pull --rebase origin "$(git rev-parse --abbrev-ref HEAD)" || true
            git push --force-with-lease
          else
            echo "No changes to commit"
          fi
